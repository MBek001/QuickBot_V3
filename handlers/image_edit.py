
import logging
from typing import Optional

from telegram import Update, InputMediaPhoto
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes

from config import (
    TRIAL_PERIOD_DAYS,
    TRIAL_USES_PER_PERIOD,
    IMAGE_MODEL
)
from models import User
from models_enums import Language, UserAction
from keyboard import get_ai_functions_keyboard, get_back_keyboard
from messages import get_message
from db import get_db, log_action
from utils.quotas import (
    has_quota, increment_quota, maybe_reset_trial,
    trial_remaining, consume_trial
)
from utils.openai_client import create_image_variation
from utils.network_retry import (
    safe_send_message,
    safe_send_photo,
    safe_delete_message
)
from utils.storage_logger import save_both_images
from handlers.state import AI_MENU, IMAGE_EDIT

logger = logging.getLogger(__name__)

# ============================================================================
# CONSTANTS
# ============================================================================

_BACK_WORDS = {
    "/done", "‚¨ÖÔ∏è back", "‚¨ÖÔ∏è orqaga", "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥",
    "back", "orqaga", "–Ω–∞–∑–∞–¥"
}


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def _resolve_lang(raw) -> Language:
    """Resolve language from various input types."""
    if isinstance(raw, Language):
        return raw
    if isinstance(raw, str):
        low = raw.lower()
        if low.startswith("uz"):
            return Language.uz
        if low.startswith("ru"):
            return Language.ru
    return Language.en


def _get_edit_instructions(lang: Language) -> str:
    """Get detailed editing instructions for user."""
    instructions = {
        Language.en: """üõ† **Smart Image Editing Mode**

üì∏ **Step 1:** Send ONE image
‚úèÔ∏è **Step 2:** Describe what to change

**Examples of edit requests:**
‚Ä¢ "Make the sky blue and add neon lights"
‚Ä¢ "Change background to a beach sunset"
‚Ä¢ "Add sunglasses and make it nighttime"
‚Ä¢ "Turn into a painting style"

**How it works:**
‚ú® AI analyzes your photo with advanced vision
üé® Maintains your pose and composition
üñºÔ∏è Applies your edits naturally and realistically

**Premium Feature with Free Trial:**
‚Ä¢ 3 free edits every 7 days for free users
‚Ä¢ Unlimited edits for premium members

Press BACK when finished.""",

        Language.ru: """üõ† **–£–º–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**

üì∏ **–®–∞–≥ 1:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ù–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚úèÔ∏è **–®–∞–≥ 2:** –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–°–¥–µ–ª–∞–π –Ω–µ–±–æ —Å–∏–Ω–∏–º –∏ –¥–æ–±–∞–≤—å –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏"
‚Ä¢ "–°–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –∑–∞–∫–∞—Ç –Ω–∞ –ø–ª—è–∂–µ"
‚Ä¢ "–î–æ–±–∞–≤—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏ –∏ —Å–¥–µ–ª–∞–π –Ω–æ—á—å"
‚Ä¢ "–ü—Ä–µ–≤—Ä–∞—Ç–∏ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω—ã–π —Å—Ç–∏–ª—å"

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚ú® AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∑—Ä–µ–Ω–∏–µ–º
üé® –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à—É –ø–æ–∑—É –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
üñºÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ

**–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–±–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π:**
‚Ä¢ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ù–∞–∂–º–∏—Ç–µ –ù–ê–ó–ê–î, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.""",

        Language.uz: """üõ† **Aqlli rasm tahrirlash**

üì∏ **1-qadam:** BITTA rasm yuboring
‚úèÔ∏è **2-qadam:** Nima o'zgartirishni yozing

**So'rov misollari:**
‚Ä¢ "Osmonni ko'k qiling va neon chiroqlar qo'shing"
‚Ä¢ "Fonni plyaj quyosh botishiga o'zgartiring"
‚Ä¢ "Ko'zoynak qo'shing va kechaga aylantiring"
‚Ä¢ "Rassom uslubiga aylantiring"

**Qanday ishlaydi:**
‚ú® AI fotoingizni ilg'or ko'rish bilan tahlil qiladi
üé® Pozangiz va kompozitsiyangizni saqlab qoladi
üñºÔ∏è O'zgarishlarni tabiiy va real qo'llaydi

**Premium funksiya bepul sinov bilan:**
‚Ä¢ Har 7 kunda 3 ta bepul tahrirlash
‚Ä¢ Premium foydalanuvchilar uchun cheklovsiz

Tugagach ORQAGA bosing."""
    }

    return instructions.get(lang, instructions[Language.en])


async def _send_typing_action(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """Send typing indicator to user."""
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not send typing action: {e}")


# ============================================================================
# MAIN HANDLER
# ============================================================================

async def image_edit_handler(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Smart image editing handler with Vision-powered analysis.

    Flow:
    1. User sends image ‚Üí Store file_id
    2. User sends edit description ‚Üí Process with Vision + DALL-E 3
    3. Send both original and edited images
    4. Store both images to channel
    """
    message = update.message
    if not message:
        return IMAGE_EDIT

    user_lang = _resolve_lang(context.user_data.get("lang", Language.en))

    # ========================================================================
    # HANDLE BACK BUTTON
    # ========================================================================
    if message.text and message.text.strip().lower() in _BACK_WORDS:
        context.user_data.pop("regen_image_file_id", None)

        with get_db() as db:
            user = db.query(User).filter(User.tg_id == update.effective_user.id).first()
            is_premium = bool(user.is_premium) if user else False
            is_admin = bool(user.is_admin) if user else False

        await safe_send_message(
            message,
            get_message("prompt_ai_menu", user_lang),
            reply_markup=get_ai_functions_keyboard(user_lang, is_premium, is_admin)
        )
        return AI_MENU

    # ========================================================================
    # LOAD USER
    # ========================================================================
    with get_db() as db:
        user: Optional[User] = db.query(User).filter(
            User.tg_id == update.effective_user.id
        ).first()

        if not user:
            await safe_send_message(
                message,
                "‚ö†Ô∏è User not found. Please /start the bot again."
            )
            return AI_MENU

        # Check for trial reset
        if maybe_reset_trial(db, user):
            await safe_send_message(
                message,
                get_message(
                    "trial_renewed",
                    user_lang,
                    feature="Image Editing",
                    total=TRIAL_USES_PER_PERIOD,
                    days=TRIAL_PERIOD_DAYS
                ),
                parse_mode=ParseMode.MARKDOWN
            )

        # ====================================================================
        # STEP 1: USER SENDS IMAGE
        # ====================================================================
        has_photo = bool(message.photo)
        has_image_doc = (
                message.document
                and message.document.mime_type
                and message.document.mime_type.startswith("image/")
        )

        if (has_photo or has_image_doc) and "regen_image_file_id" not in context.user_data:
            # Store the image file ID
            file_id = message.photo[-1].file_id if has_photo else message.document.file_id
            context.user_data["regen_image_file_id"] = file_id

            logger.info(f"üì∏ Image received from user {user.tg_id}")

            # Send instructions for next step
            prompt_msg = {
                Language.en: """‚úÖ **Image Received!**

Now describe what you want to edit or change.

**Be specific for best results:**
‚úÖ "Make the sky purple with stars"
‚úÖ "Change background to Tokyo at night"
‚úÖ "Add neon eyebrows and make hair blue"
‚úÖ "Transform into Van Gogh painting style"

‚ùå Avoid vague requests like "make it better"

What would you like to change?""",

                Language.ru: """‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

**–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
‚úÖ "–°–¥–µ–ª–∞–π –Ω–µ–±–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º —Å–æ –∑–≤—ë–∑–¥–∞–º–∏"
‚úÖ "–°–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –Ω–æ—á–Ω–æ–π –¢–æ–∫–∏–æ"
‚úÖ "–î–æ–±–∞–≤—å –Ω–µ–æ–Ω–æ–≤—ã–µ –±—Ä–æ–≤–∏ –∏ —Å–¥–µ–ª–∞–π –≤–æ–ª–æ—Å—ã —Å–∏–Ω–∏–º–∏"
‚úÖ "–ü—Ä–µ–≤—Ä–∞—Ç–∏ –≤ —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–∏–Ω—ã –í–∞–Ω –ì–æ–≥–∞"

‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "—Å–¥–µ–ª–∞–π –ª—É—á—à–µ"

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?""",

                Language.uz: """‚úÖ **Rasm qabul qilindi!**

Endi nima tahrirlash yoki o'zgartirishni xohlayotganingizni tasvirlab bering.

**Eng yaxshi natija uchun aniq bo'ling:**
‚úÖ "Osmonni binafsha rangda yulduzlar bilan qiling"
‚úÖ "Fonni Tokiodagi tunga o'zgartiring"
‚úÖ "Neon qoshlar qo'shing va sochni ko'k qiling"
‚úÖ "Van Gog rasm uslubiga aylantiring"

‚ùå "Yaxshiroq qiling" kabi noaniq so'rovlardan saqlaning

Nimani o'zgartirmoqchisiz?"""
            }.get(user_lang)

            await safe_send_message(
                message,
                prompt_msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_back_keyboard(user_lang)
            )
            return IMAGE_EDIT

        # ====================================================================
        # STEP 2: USER SENDS EDIT DESCRIPTION
        # ====================================================================
        if "regen_image_file_id" in context.user_data and message.text:
            edit_prompt = message.text.strip()

            # Validate prompt length
            if len(edit_prompt) < 5:
                await safe_send_message(
                    message,
                    "‚ö†Ô∏è Please provide a more detailed description of what to edit."
                )
                return IMAGE_EDIT

            # ================================================================
            # ACCESS CHECK: Trial or Premium
            # ================================================================
            if not (user.is_premium or user.is_admin):
                remaining = trial_remaining(db, user, "image_edit")

                if remaining <= 0:
                    await safe_send_message(
                        message,
                        get_message("premium_required", user_lang),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    context.user_data.pop("regen_image_file_id", None)
                    return AI_MENU

                # Notify about trial usage
                if remaining == TRIAL_USES_PER_PERIOD:
                    await safe_send_message(
                        message,
                        get_message(
                            "trial_started",
                            user_lang,
                            feature="Image Editing",
                            remaining=remaining,
                            total=TRIAL_USES_PER_PERIOD,
                            days=TRIAL_PERIOD_DAYS
                        )
                    )
                else:
                    await safe_send_message(
                        message,
                        get_message(
                            "trial_remaining",
                            user_lang,
                            feature="Image Editing",
                            remaining=remaining,
                            total=TRIAL_USES_PER_PERIOD
                        )
                    )

            # ================================================================
            # QUOTA CHECK
            # ================================================================
            if not has_quota(db, user, "convert"):
                await safe_send_message(
                    message,
                    get_message("quota_exceeded", user_lang),
                    parse_mode=ParseMode.MARKDOWN
                )
                context.user_data.pop("regen_image_file_id", None)
                return AI_MENU

            file_id = context.user_data.pop("regen_image_file_id")

            try:
                # ============================================================
                # DOWNLOAD ORIGINAL IMAGE
                # ============================================================
                logger.info(f"üì• Downloading original image for user {user.tg_id}")
                tg_file = await context.bot.get_file(file_id)
                original_bytes = await tg_file.download_as_bytearray()
                logger.info(f"‚úÖ Downloaded {len(original_bytes)} bytes")

                # Show typing indicator
                await _send_typing_action(context, message.chat_id)

                # Status message
                status_text = {
                    Language.en: """üõ† **Processing Your Image...**

üîç Analyzing with AI Vision...
üé® Applying your edits...
‚è≥ This may take 20-30 seconds

Please wait...""",
                    Language.ru: """üõ† **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...**

üîç –ê–Ω–∞–ª–∏–∑ —Å AI Vision...
üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤–æ–∫...
‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 20-30 —Å–µ–∫—É–Ω–¥

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...""",
                    Language.uz: """üõ† **Rasmingiz qayta ishlanmoqda...**

üîç AI Vision bilan tahlil qilinmoqda...
üé® Tahrirlashlaringiz qo'llanmoqda...
‚è≥ Bu 20-30 soniya davom etishi mumkin

Iltimos, kuting..."""
                }[user_lang]

                status_msg = await safe_send_message(
                    message,
                    status_text,
                    parse_mode=ParseMode.MARKDOWN
                )

                # ============================================================
                # SMART IMAGE EDITING with Vision + DALL-E 3
                # ============================================================
                logger.info(f"üé® Starting smart image editing...")
                logger.info(f"üìù Edit prompt: {edit_prompt}")

                edited_url = await create_image_variation(
                    image_bytes=bytes(original_bytes),
                    prompt=edit_prompt
                )

                if not edited_url:
                    await safe_delete_message(status_msg)

                    error_msg = {
                        Language.en: "‚ùå Failed to edit image. Please try:\n‚Ä¢ A more specific description\n‚Ä¢ Different editing request\n‚Ä¢ Try again in a moment",
                        Language.ru: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–æ–º–µ–Ω—Ç",
                        Language.uz: "‚ùå Tahrirlash amalga oshmadi. Sinab ko'ring:\n‚Ä¢ Aniqroq tavsif\n‚Ä¢ Boshqa so'rov\n‚Ä¢ Bir ozdan keyin qayta urinib ko'ring"
                    }[user_lang]

                    await safe_send_message(message, error_msg)
                    return IMAGE_EDIT

                # ============================================================
                # DOWNLOAD EDITED IMAGE
                # ============================================================
                import requests
                edited_bytes = requests.get(edited_url, timeout=30).content
                logger.info(f"‚úÖ Edited image downloaded: {len(edited_bytes)} bytes")

                await safe_delete_message(status_msg)

                # ============================================================
                # SEND BOTH IMAGES AS MEDIA GROUP
                # ============================================================
                try:
                    caption_original = {
                        Language.en: "üì∏ Original",
                        Language.ru: "üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª",
                        Language.uz: "üì∏ Asl rasm"
                    }[user_lang]

                    caption_edited = {
                        Language.en: f"‚ú® Edited\n\nüí¨ Changes: {edit_prompt[:100]}",
                        Language.ru: f"‚ú® –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ\n\nüí¨ –ò–∑–º–µ–Ω–µ–Ω–∏—è: {edit_prompt[:100]}",
                        Language.uz: f"‚ú® Tahrirlangan\n\nüí¨ O'zgarishlar: {edit_prompt[:100]}"
                    }[user_lang]

                    media_group = [
                        InputMediaPhoto(
                            media=bytes(original_bytes),
                            caption=caption_original
                        ),
                        InputMediaPhoto(
                            media=edited_bytes,
                            caption=caption_edited
                        )
                    ]

                    await context.bot.send_media_group(
                        chat_id=message.chat_id,
                        media=media_group
                    )

                    logger.info("‚úÖ Sent both images as media group")

                except Exception as e:
                    logger.error(f"‚ùå Failed to send media group: {e}")
                    # Fallback: Send separately
                    await safe_send_photo(
                        message,
                        photo=bytes(original_bytes),
                        caption=caption_original
                    )
                    await safe_send_photo(
                        message,
                        photo=edited_bytes,
                        caption=caption_edited
                    )

                # ============================================================
                # SAVE BOTH IMAGES TO STORAGE CHANNEL
                # ============================================================
                try:
                    await save_both_images(
                        context=context,
                        db=db,
                        user=user,
                        original_bytes=bytes(original_bytes),
                        edited_bytes=edited_bytes,
                        prompt=edit_prompt,
                        model=IMAGE_MODEL
                    )
                    logger.info("‚úÖ Stored both images to channel")
                except Exception as e:
                    logger.error(f"‚ùå Storage error: {e}")

                # ============================================================
                # UPDATE TRIAL/QUOTA COUNTERS
                # ============================================================
                if not (user.is_premium or user.is_admin):
                    if consume_trial(db, user, "image_edit"):
                        rem = trial_remaining(db, user, "image_edit")
                        await safe_send_message(
                            message,
                            get_message(
                                "trial_consumed",
                                user_lang,
                                feature="Image Editing",
                                remaining=rem,
                                total=TRIAL_USES_PER_PERIOD
                            ),
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        await safe_send_message(
                            message,
                            get_message(
                                "trial_over",
                                user_lang,
                                feature="Image Editing"
                            ),
                            parse_mode=ParseMode.MARKDOWN
                        )

                increment_quota(db, user, "convert", amount=1)
                log_action(
                    db,
                    user.id,
                    UserAction.image_edit,
                    meta={"prompt": edit_prompt}
                )

                # Success message
                success_msg = {
                    Language.en: "‚úÖ Image edited successfully!\n\nSend another image to edit more, or press BACK.",
                    Language.ru: "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–ê–ó–ê–î.",
                    Language.uz: "‚úÖ Rasm muvaffaqiyatli tahrirlandi!\n\nYana rasm yuboring yoki ORQAGA bosing."
                }[user_lang]

                await safe_send_message(message, success_msg)

            except Exception as e:
                logger.error(f"‚ùå Image editing error: {e}", exc_info=True)

                # Clean up status message
                try:
                    if 'status_msg' in locals() and status_msg:
                        await safe_delete_message(status_msg)
                except Exception:
                    pass

                # Send error message
                error_text = {
                    Language.en: f"‚ùå Error while editing image.\n\nPlease try:\n‚Ä¢ Different image\n‚Ä¢ Simpler edit request\n‚Ä¢ Try again in a moment\n\nError: {str(e)[:100]}",
                    Language.ru: f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n‚Ä¢ –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n\n–û—à–∏–±–∫–∞: {str(e)[:100]}",
                    Language.uz: f"‚ùå Tahrirlashda xatolik.\n\nSinab ko'ring:\n‚Ä¢ Boshqa rasm\n‚Ä¢ Soddaroq so'rov\n‚Ä¢ Keyinroq qayta urinib ko'ring\n\nXatolik: {str(e)[:100]}"
                }[user_lang]

                await safe_send_message(message, error_text)

            return IMAGE_EDIT

    # ========================================================================
    # FALLBACK: SHOW INSTRUCTIONS
    # ========================================================================
    await safe_send_message(
        message,
        _get_edit_instructions(user_lang),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_back_keyboard(user_lang)
    )
    return IMAGE_EDIT
